
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    }
}

/*
 * CopyrightÂ© 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import groovyx.net.http.HttpResponseDecorator
import groovyx.net.http.RESTClient

import static groovyx.net.http.ContentType.JSON

class GitHubReleaseAsset extends DefaultTask {
    private static
    final Logger BUILD_LOGGER = Logging.getLogger(GitHubReleaseAsset.class)
    def token
    def repositoryName = null
    def githubReleaseTag = null
    def markAsNonPre = false

    private Map<File, Map<String, String>> assetsToUpload = [:]

    private def contents = [jar: 'application/java-archive',
                            zip: 'application/zip']

    @TaskAction
    void upload() {
        def tok = token ?: System.getenv("GITHUB_AUTH_TOKEN")
        if (tok == null) {
            throw new RuntimeException("No token provided for github")
        }
        def repo = repositoryName ?: getRepoNameFromProject() ?: getRepoNameFromSystem()
        def tag = githubReleaseTag ?: project.version
        BUILD_LOGGER.info("GitHub: Uploading to repositoryName $repo tag $tag")
        def gh = createClient()
        def heads = headers(tok)
        HttpResponseDecorator result = gh.get([
                path   : "/repos/$repo/releases/tags/$tag",
                headers: heads]) as HttpResponseDecorator
        def uploadUrl = result.data.upload_url
        def id = result.data.id
        assetsToUpload.each {
            gh.getEncoder()[it.value.contentType] = gh.getEncoder().&encodeStream
            BUILD_LOGGER.log(LogLevel.WARN, "GitHub: Uploading to repositoryName $repo tag $tag file ${it.key.path} : ${it.value}")
            gh.post([
                    uri               : uploadUrl - "{?name,label}",
                    query             : [name : "${it.value.name}",
                                         label: "${it.value.label}"],
                    body              : it.key.bytes,
                    requestContentType: it.value.contentType,
                    headers           : heads
            ])
        }
        if (markAsNonPre) {
            gh.post([
                    path              : "/repos/$repo/releases/$id",
                    requestContentType: JSON,
                    headers           : heads,
                    body              : ["prerelease": false]
            ])
        }
    }

    private String getRepoNameFromSystem() {
        System.getProperty("user.name") + "/" + project.rootProject.getName()
    }

    private String getRepoNameFromProject() {
        return (project.ext.has('githubRepository') ? project.ext['githubRepository'] : null)
    }

    private static def getExtension(File f) {
        def of = f.getName().lastIndexOf(".")
        if (of == -1) {
            return null
        } else {
            return f.getName().substring(of + 1)
        }
    }

    def asset(File f, Map<String, String> params = [:]) {
        def n = params.getOrDefault('name', f.getName())
        def l = params.getOrDefault('label', params.getOrDefault('name', f.getName()))
        def ct = params.getOrDefault('contentType', contents[getExtension(f)]) ?: "application/zip"
        assetsToUpload << [(f): [name: n, label: l, contentType: ct]]
    }

    private static LinkedHashMap<String, String> headers(String tok) {
        ['Authorization': "token $tok",
         'User-Agent'   : 's4s0l release enricher']
    }

    static def createClient() {
        def gh = new RESTClient("https://api.github.com")
        gh.ignoreSSLIssues()
        gh
    }
}

ext.GitHubReleaseUploadAsset = GitHubReleaseAsset